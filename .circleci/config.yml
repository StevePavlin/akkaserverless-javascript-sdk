version: 2.1

orbs:
  build-tools: circleci/build-tools@2.9.0

commands:
  checkout-and-merge-to-main:
    steps:
      - checkout
      - run:
          name: Configure git user
          command: |
            # required by merge-with-parent (for some unknown reason)
            git config user.email "circleci@example.com"
            git config user.name "CircleCI"
      - build-tools/merge-with-parent:
          parent: main

  setup_sbt:
    description: "Set up sbt"
    parameters:
      version:
        type: string
        default: "1.4.9"
    steps:
      - install-java-11
      - run:
          name: Install sbt
          command: |
            curl -L -o sbt-<< parameters.version >>.deb https://repo.scala-sbt.org/scalasbt/debian/sbt-<< parameters.version >>.deb
            sudo dpkg -i sbt-<< parameters.version >>.deb
            rm sbt-<< parameters.version >>.deb

  save_deps_cache:
    description: "Save dependency cache"
    steps:
      - save_cache:
          key: deps-cache-01
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.cache/coursier"

  restore_deps_cache:
    description: "Restore dependency cache"
    steps:
      - restore_cache:
          key: deps-cache-01

jobs:

  test-codegen:
    docker:
      - image: cimg/openjdk:11.0
    description: "Checks"
    steps:
      - checkout-and-merge-to-main
      - setup_sbt
      - restore_deps_cache
      - run:
          name: Run scalafmt checks
          working_directory: "~/project/codegen"
          command: |
            sbt scalafmtCheckAll scalafmtSbtCheck || \
              { echo "[error] Code not formatted prior to commit. Run 'sbt scalafmtAll scalafmtSbt' then commit the reformatted code."; false; }
      - run:
          name: Run header checks
          working_directory: "~/project/codegen"
          command: |
            sbt headerCheckAll || \
              { echo "[error] Code missing headers prior to commit. Run 'sbt headerCreateAll' then commit the updated code."; false; }
      - run:
          name: Run the tests
          working_directory: "~/project/codegen"
          command: sbt test
      - save_deps_cache

  tests:
    docker:
      - image: cimg/node:14.16.1
    description: "tests"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: "run checks"
          command: |
            npm ci && npm run license-check && npm run prettier-check
      - run:
          name: "check vulnerabilities in transitive dependencies"
          command: |
            pushd sdk && npm audit --production && popd
      - run:
          name: "run tests"
          command: |
            pushd sdk && npm ci && npm test && npm pack && popd
            pushd samples/valueentity-counter && npm install ../../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm install && npm run build && npm test && popd
            pushd samples/js-valueentity-shopping-cart && npm install ../../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm install && npm run build && npm test && popd
            pushd samples/js-eventsourced-shopping-cart && npm install ../../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm install && npm run build && npm test && popd

  integration-tests:
    machine: true
    description: "integration tests"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: "run integration tests"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            pushd sdk && nvm install && npm ci && DEBUG='testcontainers*' npm run integration-test && npm pack && popd
            pushd samples/js-customer-registry && npm install ../../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm ci && npm run integration-test && popd

            pushd sdk && nvm install && npm ci && npm pack && popd
            pushd samples/valueentity-counter && npm install ../../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm install && npm run build && npm run integration-test && popd
            pushd samples/js-valueentity-shopping-cart && npm install ../../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm install && npm run build && npm run integration-test && popd
            pushd samples/js-eventsourced-shopping-cart && npm install ../../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm install && npm run build && npm run integration-test && popd

  tck-tests:
    machine: true
    description: "TCK tests"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: "run TCK tests"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            pushd sdk && nvm install && npm ci && npm pack && popd
            pushd tck && nvm install && npm install ../sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz && npm ci && npm run tck && popd

  tools-tests:
    docker:
      - image: cimg/node:14.16.1
    description: "tools-tests"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: "install codegen"
          command: |
            cd tools/create-akkasls-entity
            npm ci
      - run:
          name: "install akkasls-scripts"
          command: |
            cd tools/akkasls-scripts
            npm ci && npm pack
      - run:
          name: "test everything"
          working_directory: "~/tmp"
          command: |
            node "${HOME}/project/tools/create-akkasls-entity/create-akkasls-entity.js" generated-project
            cd generated-project
            npm install "${HOME}/project/tools/akkasls-scripts/lightbend-akkasls-scripts-1.0.0.tgz" && \
              npm install && \
              npm run build && \
              npm run test

  e2e-tests:
    machine:
      image: ubuntu-2004:202104-01
    description: "e2e-tests"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: "install sdk"
          working_directory: "~/project/sdk"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install
            npm ci && npm pack
      - run:
          name: "install codegen"
          working_directory: "~/project/tools/create-akkasls-entity"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install
            npm ci
      - run:
          name: "install akkasls-scripts"
          working_directory: "~/project/tools/akkasls-scripts"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install
            npm ci && npm pack
      - run:
          name: "generate project"
          working_directory: "~/tmp"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install v14
            node "${HOME}/project/tools/create-akkasls-entity/create-akkasls-entity.js" generated-project --template event-sourced-entity
      - run:
          name: "test up to unit tests"
          working_directory: "~/tmp/generated-project"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install v14
            npm install "${HOME}/project/tools/akkasls-scripts/lightbend-akkasls-scripts-1.0.0.tgz" && \
              npm install "${HOME}/project/sdk/lightbend-akkaserverless-javascript-sdk-0.0.0.tgz" && \
              npm install && \
              npm run build && \
              npm run test
      - run:
          name: "test the full local dev env"
          working_directory: "~/tmp/generated-project"
          environment:
            HOST: "0.0.0.0"
            USER_FUNCTION_HOST: "172.17.0.1"
          shell: /bin/bash
          command: |
            source /opt/circleci/.nvm/nvm.sh
            nvm install v14
            # Run proxy in background
            docker-compose -f docker-compose.yml -f docker-compose.linux.yml up -d
            # Run the service in background
            npm run start &
            # Test the event-sourced-entity
            until curl -XPOST localhost:9000/com.example.MyServiceEntity/GetValue -H "Content-Type:application/json" -d '{"entityId":"test"}' -o response.txt; do sleep 5; done
            echo "Validating expected error message"
            test "$(cat response.txt)" = 'The command handler for `GetValue` is not implemented, yet'

  validate-docs:
    machine: true
    description: "validate docs"
    steps:
      - checkout-and-merge-to-main
      - run:
          name: "validate docs"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            pushd sdk && nvm install && popd
            make -C docs

  publish:
    docker:
      - image: cimg/node:14.16.1
    steps:
      - checkout
      - run:
          name: "publish to npm"
          command: |
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
            pushd sdk && npm ci && npm publish --access public && popd
            pushd tools/create-akkasls-entity && \
              'sed -i "s/  \"version\":.*/  \"version\": \"$(git tag|cut -c2-)\",/" package.json' && \
              npm publish --access public && \
              popd
            pushd tools/akkasls-scripts && \
              'sed -i "s/  \"version\":.*/  \"version\": \"$(git tag|cut -c2-)\",/" package.json' && \
              npm publish --access public && \
              popd

  publish-tck:
    machine: true
    description: "publish TCK"
    steps:
      - checkout
      - run: bin/docker-login-public-gcr.sh
      - run:
          name: "publish TCK docker image"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            pushd tck && nvm install && npm run docker-build && npm run docker-push && popd

  publish-docs:
    machine: true
    description: "publish docs"
    steps:
      - checkout
      # deploy key for pushing docs to branch
      - add_ssh_keys:
          fingerprints:
            - "d1:35:c0:f1:89:8c:45:06:6f:f9:7e:a3:b5:57:18:87"
      - run:
          name: "publish docs"
          command: |
            source /opt/circleci/.nvm/nvm.sh
            pushd sdk && nvm install && popd
            make -C docs deploy

workflows:
  CI:
    jobs:
      - tests:
          filters: # required since publish jobs have tag filters and dependencies
            tags:
              only: /.*/
      - integration-tests:
          filters: # required since publish jobs have tag filters and dependencies
            tags:
              only: /.*/
      - tck-tests:
          filters: # required since publish jobs have tag filters and dependencies
            tags:
              only: /.*/
      - validate-docs:
          filters: # required since publish jobs have tag filters and dependencies
            tags:
              only: /.*/
      - tools-tests:
          filters: # required since publish jobs have tag filters and dependencies
            tags:
              only: /.*/
      - e2e-tests:
          filters: # required since publish jobs have tag filters and dependencies
            tags:
              only: /.*/
      - test-codegen:
          filters: # required since publish jobs have tag filters and dependencies
            tags:
              only: /.*/
      - publish:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - tests
            - integration-tests
            - tck-tests
            - validate-docs
            - tools-tests
            - e2e-tests
      - publish-tck:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - tests
            - integration-tests
            - tck-tests
            - validate-docs
            - tools-tests
            - e2e-tests
      - publish-docs:
          filters: # version tags only
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - tests
            - integration-tests
            - tck-tests
            - validate-docs
            - tools-tests
            - e2e-tests
