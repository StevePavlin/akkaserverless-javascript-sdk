/*
 * Copyright (c) Lightbend Inc. 2021
 *
 */

package com.lightbend.akkasls.codegen.js

import com.google.protobuf.{ DescriptorProtos, Descriptors }
import com.lightbend.akkasls.codegen.{ ModelBuilder, js }
import scopt.OParser

import java.io.{ File, FileInputStream, IOException }
import java.nio.file.{ Path, Paths }
import scala.jdk.CollectionConverters._
import scala.util.Using

object Cli {

  @SuppressWarnings(Array("org.wartremover.warts.DefaultArguments"))
  private case class Config(
      baseDir: Path = Paths.get(sys.props("user.dir")),
      mainFile: String = "index.js",
      descriptorSetOutputDirectory: Path = Paths.get(sys.props("user.dir")),
      descriptorSetFileName: String = "user-function.desc",
      serviceNamesFilter: String = ".*ServiceEntity",
      sourceDirectory: Path = Paths.get("."),
      testSourceDirectory: Path = Paths.get(".")
  )

  private val builder = OParser.builder[Config]
  private val parser = {
    import builder._
    OParser.sequence(
      programName("akkasls-codegen-js"),
      head("akkasls-codegen-js", BuildInfo.version),
      opt[File]("base-dir")
        .action((x, c) => c.copy(baseDir = x.toPath))
        .text(
          "The base directory for the project as a parent to the source files - defaults to the current working directory"
        ),
      opt[String]("main-file")
        .action((x, c) => c.copy(mainFile = x))
        .text(
          "The name of the file to be used to set up entities, relative to the source directory - defaults to index.js"
        ),
      opt[File]("descriptor-set-output-dir")
        .action((x, c) => c.copy(descriptorSetOutputDirectory = x.toPath))
        .text(
          "The location of the descriptor output file generated by protoc - defaults to the current working directory"
        ),
      opt[String]("descriptor-set-file")
        .action((x, c) => c.copy(descriptorSetFileName = x))
        .text(
          "The name of the descriptor output file generated by protoc - defaults to user-function.desc"
        ),
      opt[String]("service-names-filter")
        .action((x, c) => c.copy(serviceNamesFilter = x))
        .text(
          "The regex pattern used to discern entities from service declarations - defaults to .*ServiceEntity"
        ),
      opt[File]("source-dir")
        .action((x, c) => c.copy(sourceDirectory = x.toPath))
        .text(
          "The location of source files in relation to the base directory - defaults to '.'"
        ),
      opt[File]("test-source-dir")
        .action((x, c) => c.copy(testSourceDirectory = x.toPath))
        .text(
          "The location of test source files in relation to the base directory - defaults to '.'"
        ),
      help("help").text("Prints this usage text")
    )
  }

  def main(args: Array[String]): Unit =
    OParser.parse(parser, args, Config()) match {
      case Some(config) =>
        val protobufDescriptor =
          config.descriptorSetOutputDirectory.resolve(config.descriptorSetFileName).toFile
        if (protobufDescriptor.exists) {
          println("Inspecting proto file descriptor for entity generation...")
          val _ = Using(new FileInputStream(protobufDescriptor)) { fis =>
            try {
              val descriptorProtos =
                DescriptorProtos.FileDescriptorSet.parseFrom(fis).getFileList.asScala

              for (descriptorProto <- descriptorProtos) {

                val fileDescriptor =
                  try Descriptors.FileDescriptor.buildFrom(descriptorProto, Array.empty, true)
                  catch {
                    case e: Descriptors.DescriptorValidationException =>
                      System.err.println(
                        "There was a problem building the file descriptor from its protobuf"
                      )
                      System.err.println(e.toString)
                      sys.exit(1)
                  }

                val entities =
                  ModelBuilder.introspectProtobufClasses(fileDescriptor, config.serviceNamesFilter)

                js.SourceGenerator
                  .generate(
                    entities,
                    config.sourceDirectory,
                    config.testSourceDirectory,
                    config.mainFile
                  )
                  .foreach { p =>
                    println("Generated: " + config.baseDir.relativize(p).toString)
                  }
              }
            } catch {
              case e: IOException =>
                System.err.println("Problem reading the protobuf descriptor file")
                System.err.println(e.toString)
                sys.exit(1)
            }
          }
        } else {
          println("Skipping generation because there is no protobuf descriptor found.")
        }
      case _ =>
        sys.exit(1)
    }
}
