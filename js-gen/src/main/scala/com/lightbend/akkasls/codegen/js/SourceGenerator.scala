/*
 * Copyright (c) Lightbend Inc. 2021
 *
 */

package com.lightbend.akkasls.codegen
package js

import com.google.common.base.Charsets
import org.bitbucket.inkytonik.kiama.output.PrettyPrinter
import org.bitbucket.inkytonik.kiama.output.PrettyPrinterTypes.Document

import java.nio.file.{ Files, Path }

/**
  * Responsible for generating JavaScript source from an entity model
  */
object SourceGenerator extends PrettyPrinter {

  override val defaultIndent = 2

  /**
    * Generate JavaScript source from entities where the target source and test source directories have no existing source.
    * Note that we only generate tests for entities where we are successful in generating an entity. The user may
    * not want a test otherwise.
    *
    * Also generates a main source file if it does not already exist.
    *
    * Impure.
    *
    * @param protobufDescriptor The path to the protobuf descriptor file
    * @param entities        The model of entity metadata to generate source file
    * @param protobufSourceDirectory A directory to read protobuf source files in.
    * @param sourceDirectory A directory to generate source files in, which can also containing existing source.
    * @param testSourceDirectory A directory to generate test source files in, which can also containing existing source.
    * @param indexFilename  The name of the index file e.g. index.js
    * @return A collection of paths addressing source files generated by this function
    */
  def generate(
      protobufDescriptor: Path,
      entities: Iterable[ModelBuilder.Entity],
      protobufSourceDirectory: Path,
      sourceDirectory: Path,
      testSourceDirectory: Path,
      indexFilename: String
  ): Iterable[Path] =
    entities.flatMap { case entity: ModelBuilder.EventSourcedEntity =>
      val entityFilename = name(entity.fullName).toLowerCase + ".js"
      val sourcePath     = sourceDirectory.resolve(entityFilename)
      if (!sourcePath.toFile.exists()) {
        // We're going to generate an entity - let's see if we can generate its test...
        val entityTestFilename = entityFilename.replace(".js", ".test.js")
        val testSourcePath =
          testSourceDirectory.resolve(entityTestFilename)
        val testSourceFiles = if (!testSourcePath.toFile.exists()) {
          val _ = testSourcePath.getParent.toFile.mkdirs()
          val _ = Files.write(
            testSourcePath,
            testSource(protobufDescriptor, entity).layout.getBytes(
              Charsets.UTF_8
            )
          )
          List(testSourcePath)
        } else {
          List.empty
        }

        // Now we generate the entity
        val _ = sourcePath.getParent.toFile.mkdirs()
        val _ = Files.write(
          sourcePath,
          source(
            protobufSourceDirectory,
            sourceDirectory,
            entity
          ).layout
            .getBytes(Charsets.UTF_8)
        )

        List(sourcePath) ++ testSourceFiles
      } else {
        List.empty
      }
    } ++ {
      if (entities.nonEmpty) {
        // Generate a main source file is it is not there already
        val indexPath =
          sourceDirectory.resolve(indexFilename)
        if (!indexPath.toFile.exists()) {
          val _ = indexPath.getParent.toFile.mkdirs()
          val _ = Files.write(
            indexPath,
            indexSource(entities).layout.getBytes(
              Charsets.UTF_8
            )
          )
          List(indexPath)
        } else {
          List.empty
        }
      } else {
        List.empty
      }
    }

  private[codegen] def source(
      protobufSourceDirectory: Path,
      sourceDirectory: Path,
      entity: ModelBuilder.EventSourcedEntity
  ): Document =
    pretty(
      """const EventSourced = require("cloudstate").EventSourced""" <> semi <> line <>
      line <>
      "const entity = new EventSourced" <> parens(
        nest(
          line <>
          brackets(dquotes(name(entity.fullName).toLowerCase() + ".proto")) <> comma <> line <>
          dquotes(entity.fullName) <> comma <> line <>
          braces(
            nest(
              line <>
              ssep(
                (if (sourceDirectory != protobufSourceDirectory)
                   Seq(
                     "includeDirs" <> colon <+> brackets(
                       dquotes(
                         sourceDirectory.toAbsolutePath
                           .relativize(protobufSourceDirectory.toAbsolutePath)
                           .toString
                       )
                     )
                   )
                 else Seq.empty) ++ Seq(
                  "persistenceId" <> colon <+> dquotes(name(entity.fullName).toLowerCase())
                ),
                comma <> line
              )
            ) <> line
          )
        ) <> line
      ) <> semi <> line <>
      line <>
      "entity.setBehavior" <> parens(
        "state => " <> braces(
          nest(
            line <>
            "return" <+> braces(
              nest(
                line <>
                "commandHandlers:" <+> braces(
                  nest(
                    line <>
                    ssep(
                      entity.commands.toSeq.map { command =>
                        name(command.fullname) <> colon <+> lowerFirst(name(command.fullname))
                      },
                      comma <> line
                    )
                  ) <> line
                )
              ) <> line
            ) <> semi
          ) <> line
        )
      ) <> semi <> line <>
      line <>
      ssep(
        entity.commands.toSeq.map { command =>
          "function" <+> lowerFirst(name(command.fullname)) <> parens(
            "command, state, ctx"
          ) <+> braces(
            nest(
              line <>
              "ctx.fail(\"The command handler for `" <> name(
                command.fullname
              ) <> "` is not implemented, yet\")" <> semi
            ) <> line
          )
        },
        line <> line
      ) <> line <>
      line <>
      "module.exports = entity;"
    )

  // TODO: Generate the test source
  private[codegen] def testSource(
      protobufDescriptor: Path,
      entity: ModelBuilder.EventSourcedEntity
  ): Document = pretty(emptyDoc)

  private[codegen] def indexSource(
      entities: Iterable[ModelBuilder.Entity]
  ): Document =
    pretty(
      ssep(
        entities.map { case entity: ModelBuilder.EventSourcedEntity =>
          val entityFilename = name(entity.fullName).toLowerCase + ".js"
          "require" <> parens(
            dquotes("./" <> entityFilename)
          ) <> ".start()" <> semi
        }.toSeq,
        line
      )
    )

  private def name(`type`: String): String =
    `type`.reverse.takeWhile(_ != '.').reverse

  private def lowerFirst(text: String): String =
    text.headOption match {
      case Some(c) => c.toLower.toString + text.drop(1)
      case None    => ""
    }

}
