/*
 * Copyright (c) Lightbend Inc. 2021
 *
 */

package com.lightbend.akkasls.codegen

import com.google.common.base.Charsets
import org.bitbucket.inkytonik.kiama.output.PrettyPrinter
import org.bitbucket.inkytonik.kiama.output.PrettyPrinterTypes.Document

import java.nio.file.{ Files, Path }

/**
  * Responsible for generating Java source from an entity model
  */
object SourceGenerator extends PrettyPrinter {

  /**
    * Generate Java source from entities where the target source directory has no existing source.
    *
    * Impure.
    *
    * @param entities        The model of entity metadata to generate source file
    * @param sourceDirectory A directory to generate source files in, which can also containing existing source.
    * @return A collection of paths addressing source files generated by this function
    */
  def generate(entities: Iterable[ModelBuilder.Entity], sourceDirectory: Path): Iterable[Path] =
    entities.flatMap { case entity: ModelBuilder.EventSourcedEntity =>
      val className     = entity.fullName.reverse.takeWhile(_ != '.').reverse
      val packageName   = entity.fullName.dropRight(className.length + 1)
      val sourceFileStr = packageName.replace(".", "/") + "/" + className + ".java"
      val sourcePath    = sourceDirectory.resolve(sourceFileStr)
      if (!sourcePath.toFile.exists()) {
        val _ = sourcePath.getParent.toFile.mkdirs()
        val _ = Files.write(
          sourcePath,
          source(entity, packageName, className).layout.getBytes(Charsets.UTF_8)
        )
        List(sourcePath)
      } else {
        List.empty
      }
    }

  /**
    * Map a source document from an entity.
    *
    * @param entity the entity meta data
    * @param packageName the Java package to generate
    * @param className the outer Java class name to generate
    * @return the generated document
    */
  private[codegen] def source(
      entity: ModelBuilder.EventSourcedEntity,
      packageName: String,
      className: String
  ): Document =
    pretty(
      `package`(packageName) <>
      linebreak <>
      `import`("com.google.protobuf.Empty") <>
      `import`("io.cloudstate.javasupport.EntityId") <>
      `import`("io.cloudstate.javasupport.eventsourced.*") <>
      linebreak <>
      javaDoc("An event sourced entity.") <>
      `annotation`("EventSourcedEntity") <>
      `class`("public", className) {
        emptyDoc
      }
    )

  private def `package`(packageName: String): Doc =
    "package" <+> packageName <> ";" <> linebreak

  private def `import`(importName: String): Doc =
    "import" <+> importName <> ";" <> linebreak

  private def javaDoc(comment: String): Doc =
    "/**" <+> comment <+> "*/" <> linebreak

  private def annotation(annotationName: String): Doc =
    "@" <> annotationName <> linebreak

  private def `class`(scope: String, className: String)(body: Doc): Doc =
    scope <+> "class" <+> className <+> "{" <> linebreak <>
    indent(body) <> linebreak <>
    "}"

}
