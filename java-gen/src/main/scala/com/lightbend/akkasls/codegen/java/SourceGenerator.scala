/*
 * Copyright (c) Lightbend Inc. 2021
 *
 */

package com.lightbend.akkasls.codegen
package java

import com.google.common.base.Charsets
import org.bitbucket.inkytonik.kiama.output.PrettyPrinter
import org.bitbucket.inkytonik.kiama.output.PrettyPrinterTypes.Document

import _root_.java.nio.file.{ Files, Path, Paths }
import com.lightbend.akkasls.codegen.ModelBuilder.EventSourcedEntity
import com.lightbend.akkasls.codegen.ModelBuilder.ValueEntity

/**
  * Responsible for generating Java source from an entity model
  */
object SourceGenerator extends PrettyPrinter {

  /**
    * Generate Java source from entities where the target source and test source directories have no existing source.
    * Note that we only generate tests for entities where we are successful in generating an entity. The user may
    * not want a test otherwise.
    *
    * Also generates a main source file if it does not already exist.
    *
    * Impure.
    *
    * @param entities        The model of entity metadata to generate source file
    * @param sourceDirectory A directory to generate source files in, which can also containing existing source.
    * @param testSourceDirectory A directory to generate test source files in, which can also containing existing source.
    * @param mainClass  A fully qualified classname to be used as the main class
    * @return A collection of paths addressing source files generated by this function
    */
  def generate(
      model: ModelBuilder.Model,
      sourceDirectory: Path,
      testSourceDirectory: Path,
      generatedSourceDirectory: Path,
      mainClass: String
  ): Iterable[Path] = {

    def packageAsPath(packageName: String): Path =
      Paths.get(packageName.replace(".", "/"))

    model.services.values.flatMap { case service: ModelBuilder.Service =>
      model.entities.get(service.entityFullName).toSeq.flatMap { case entity: ModelBuilder.Entity =>
        val packageName = service.fqn.parent.javaPackage
        val className   = service.fqn.name
        val packagePath = packageAsPath(packageName)

        val implClassName = className + "Impl"
        val implSourcePath =
          sourceDirectory.resolve(packagePath.resolve(implClassName + ".java"))

        val interfaceClassName = className
        val interfaceSourcePath =
          generatedSourceDirectory.resolve(packagePath.resolve(interfaceClassName + ".java"))

        val _ = interfaceSourcePath.getParent.toFile.mkdirs()
        val _ = Files.write(
          interfaceSourcePath,
          interfaceSource(service, entity, packageName, className).layout.getBytes(
            Charsets.UTF_8
          )
        )

        if (!implSourcePath.toFile.exists()) {
          // We're going to generate an entity - let's see if we can generate its test...
          val testClassName = className + "Test"
          val testSourcePath =
            testSourceDirectory.resolve(packagePath.resolve(testClassName + ".java"))
          val testSourceFiles = if (!testSourcePath.toFile.exists()) {
            val _ = testSourcePath.getParent.toFile.mkdirs()
            val _ = Files.write(
              testSourcePath,
              testSource(service, entity, packageName, implClassName, testClassName).layout
                .getBytes(
                  Charsets.UTF_8
                )
            )
            List(testSourcePath)
          } else {
            List.empty
          }

          // Now we generate the entity
          val _ = implSourcePath.getParent.toFile.mkdirs()
          val _ = Files.write(
            implSourcePath,
            source(service, entity, packageName, implClassName, interfaceClassName).layout.getBytes(
              Charsets.UTF_8
            )
          )

          List(implSourcePath, interfaceSourcePath) ++ testSourceFiles
        } else {
          List(interfaceSourcePath)
        }
      }
    } ++ {
      if (model.services.nonEmpty) {
        // Generate a main source file is it is not there already
        val (mainClassPackageName, mainClassName) = dissassembleClassName(mainClass)
        val mainClassPackagePath                  = packageAsPath(mainClassPackageName)

        val mainClassPath =
          sourceDirectory.resolve(mainClassPackagePath.resolve(mainClassName + ".java"))
        if (!mainClassPath.toFile.exists()) {
          val _ = mainClassPath.getParent.toFile.mkdirs()
          val _ = Files.write(
            mainClassPath,
            mainSource(mainClassPackageName, mainClassName, model.services.values).layout
              .getBytes(
                Charsets.UTF_8
              )
          )
          List(mainClassPath)
        } else {
          List.empty
        }
      } else {
        List.empty
      }
    }
  }

  private[codegen] def source(
      service: ModelBuilder.Service,
      entity: ModelBuilder.Entity,
      packageName: String,
      className: String,
      interfaceClassName: String
  ): Document = {
    val messageTypes = service.commands.toSeq.flatMap(command =>
      Seq(command.inputType, command.outputType)
    ) ++ (entity match {
      case ModelBuilder.EventSourcedEntity(_, _, state, events) =>
        state.toSeq.map(_.fqn) ++ events.map(_.fqn)
      case ModelBuilder.ValueEntity(_, _, state) => Seq(state.fqn)
    })

    val imports = (messageTypes
      .filterNot(_.parent.javaPackage == packageName)
      .map(typeImport) ++
      (entity match {
        case _: ModelBuilder.EventSourcedEntity =>
          Seq(
            "com.akkaserverless.javasdk.EntityId",
            "com.akkaserverless.javasdk.eventsourcedentity.*"
          )
        case _: ModelBuilder.ValueEntity =>
          Seq(
            "com.akkaserverless.javasdk.EntityId",
            "com.akkaserverless.javasdk.valueentity.*"
          )
      })).distinct.sorted

    pretty(
      "package" <+> packageName <> semi <> line <>
      line <>
      ssep(
        imports.map(pkg => "import" <+> pkg <> semi),
        line
      ) <> line <>
      line <>
      (entity match {
        case _: ModelBuilder.EventSourcedEntity =>
          "/** An event sourced entity. */" <> line <>
            "@EventSourcedEntity" <> parens(
              "entityType" <+> equal <+> dquotes(interfaceClassName)
            )
        case _: ModelBuilder.ValueEntity =>
          "/** A value entity. */" <> line <>
            "@ValueEntity" <> parens(
              "entityType" <+> equal <+> dquotes(interfaceClassName)
            )
      }) <> line <>
      `class`("public", s"${className} extends ${interfaceClassName}") {
        "@SuppressWarnings" <> parens(dquotes("unused")) <> line <>
        "private" <+> "final" <+> "String" <+> "entityId" <> semi <> line <>
        line <>
        constructor(
          "public",
          className,
          List("@EntityId" <+> "String" <+> "entityId")
        ) {
          "this.entityId" <+> equal <+> "entityId" <> semi
        } <> line <>
        line <>
        (entity match {
          case ModelBuilder.EventSourcedEntity(_, _, Some(state), _) =>
            "@Override" <>
              line <>
              method(
                "public",
                qualifiedType(state.fqn),
                "snapshot",
                List.empty,
                emptyDoc
              ) {
                "// TODO: produce state snapshot here" <> line <>
                "return" <+> qualifiedType(
                  state.fqn
                ) <> dot <> "newBuilder().build()" <> semi
              } <> line <>
              line <>
              "@Override" <>
              line <>
              method(
                "public",
                "void",
                "handleSnapshot",
                List(
                  qualifiedType(state.fqn) <+> "snapshot"
                ),
                emptyDoc
              ) {
                "// TODO: restore state from snapshot here" <> line
              } <> line <> line
          case _ => emptyDoc
        }) <>
        ssep(
          service.commands.toSeq.map { command =>
            "@Override" <>
            line <>
            method(
              "public",
              qualifiedType(command.outputType),
              lowerFirst(command.fqn.name),
              List(
                qualifiedType(command.inputType) <+> "command",
                (entity match {
                  case ModelBuilder.ValueEntity(_, _, state) =>
                    "CommandContext" <> angles(qualifiedType(state.fqn))
                  case _ => text("CommandContext")
                }) <+> "ctx"
              ),
              emptyDoc
            ) {
              "throw ctx.fail(\"The command handler for `" <> command.fqn.name <> "` is not implemented, yet\")" <> semi
            }
          },
          line <> line
        ) <>
        (entity match {
          case ModelBuilder.EventSourcedEntity(_, _, _, events) =>
            line <>
              line <>
              ssep(
                events.toSeq.map { event =>
                  "@Override" <>
                  line <>
                  method(
                    "public",
                    "void",
                    lowerFirst(event.fqn.name),
                    List(
                      qualifiedType(event.fqn) <+> "event"
                    ),
                    emptyDoc
                  ) {
                    "throw new RuntimeException(\"The event handler for `" <> event.fqn.name <> "` is not implemented, yet\")" <> semi
                  }
                },
                line <> line
              )
          case _ => emptyDoc
        })
      }
    )
  }

  private[codegen] def interfaceSource(
      service: ModelBuilder.Service,
      entity: ModelBuilder.Entity,
      packageName: String,
      className: String
  ): Document = {
    val messageTypes = service.commands.toSeq.flatMap(command =>
      Seq(command.inputType, command.outputType)
    ) ++ (entity match {
      case ModelBuilder.EventSourcedEntity(_, _, state, events) =>
        state.toSeq.map(_.fqn) ++ events.map(_.fqn)
      case ModelBuilder.ValueEntity(_, _, state) => Seq(state.fqn)
    })

    val imports = (messageTypes
      .filterNot(_.parent.javaPackage == packageName)
      .map(typeImport) ++
      (entity match {
        case _: ModelBuilder.EventSourcedEntity =>
          Seq(
            "com.akkaserverless.javasdk.EntityId",
            "com.akkaserverless.javasdk.eventsourcedentity.*"
          )
        case _: ModelBuilder.ValueEntity =>
          Seq(
            "com.akkaserverless.javasdk.EntityId",
            "com.akkaserverless.javasdk.valueentity.*"
          )
      })).distinct.sorted

    pretty(
      "package" <+> packageName <> semi <> line <>
      line <>
      ssep(
        imports.map(pkg => "import" <+> pkg <> semi),
        line
      ) <> line <>
      line <>
      (entity match {
        case _: ModelBuilder.EventSourcedEntity => "/** An event sourced entity. */"
        case _: ModelBuilder.ValueEntity        => "/** A value entity. */"
      }) <> line <>
      `class`("public abstract", className) {
        (entity match {
          case ModelBuilder.EventSourcedEntity(_, _, Some(state), _) =>
            "@Snapshot" <>
              line <>
              abstractMethod(
                "public",
                qualifiedType(state.fqn),
                "snapshot",
                List.empty
              ) <> line <>
              line <>
              "@SnapshotHandler" <>
              line <>
              abstractMethod(
                "public",
                "void",
                "handleSnapshot",
                List(
                  qualifiedType(state.fqn) <+> "snapshot"
                )
              ) <> line <>
              line
          case _ => emptyDoc
        }) <>
        ssep(
          service.commands.toSeq.map { command =>
            "@CommandHandler" <>
            line <>
            abstractMethod(
              "public",
              qualifiedType(command.outputType),
              lowerFirst(command.fqn.name),
              List(
                qualifiedType(command.inputType) <+> "command",
                (entity match {
                  case ModelBuilder.ValueEntity(_, _, state) =>
                    "CommandContext" <> angles(qualifiedType(state.fqn))
                  case _ => text("CommandContext")
                }) <+> "ctx"
              )
            )
          },
          line <> line
        ) <>
        (entity match {
          case ModelBuilder.EventSourcedEntity(_, _, _, events) =>
            line <>
              line <>
              ssep(
                events.toSeq.map { event =>
                  "@EventHandler" <>
                  line <>
                  abstractMethod(
                    "public",
                    "void",
                    lowerFirst(event.fqn.name),
                    List(
                      qualifiedType(event.fqn) <+> "event"
                    )
                  )
                },
                line <> line
              )
          case _ => emptyDoc
        })
      }
    )
  }

  private[codegen] def testSource(
      service: ModelBuilder.Service,
      entity: ModelBuilder.Entity,
      packageName: String,
      implClassName: String,
      testClassName: String
  ): Document = {
    val messageTypes =
      service.commands.flatMap(command => Seq(command.inputType, command.outputType))

    val imports = (messageTypes.toSeq
      .filterNot(_.parent.javaPackage == packageName)
      .map(typeImport) ++ Seq(
      "org.junit.Test",
      "org.mockito.*"
    ) ++ (entity match {
      case _: EventSourcedEntity =>
        Seq("com.akkaserverless.javasdk.eventsourcedentity.CommandContext")
      case _: ValueEntity =>
        Seq("com.akkaserverless.javasdk.valueentity.CommandContext")
    })).distinct.sorted

    pretty(
      "package" <+> packageName <> semi <> line <>
      line <>
      ssep(
        imports.map(pkg => "import" <+> pkg <> semi),
        line
      ) <> line <>
      line <>
      `class`("public", testClassName) {
        "private" <+> "String" <+> "entityId" <+> equal <+> """"entityId1"""" <> semi <> line <>
        "private" <+> implClassName <+> "entity" <> semi <> line <>
        "private" <+> "CommandContext" <+> "context" <+> equal <+> "Mockito.mock(CommandContext.class)" <> semi <> line <>
        line <>
        ssep(
          service.commands.toSeq.map { command =>
            "@Test" <> line <>
            method(
              "public",
              "void",
              lowerFirst(command.fqn.name) + "Test",
              List.empty,
              emptyDoc
            ) {
              "entity" <+> equal <+> "new" <+> implClassName <> parens(
                "entityId"
              ) <> semi <> line <>
              line <>
              "// TODO: you may want to set fields in addition to the entity id" <> line <>
              "//" <> indent(
                "entity" <> dot <> lowerFirst(command.fqn.name) <> parens(
                  qualifiedType(
                    command.inputType
                  ) <> dot <> "newBuilder().setEntityId(entityId).build(), context"
                )
              ) <> semi <>
              (entity match {
                case _: ModelBuilder.EventSourcedEntity =>
                  line <>
                    line <>
                    "// TODO: if you wish to verify events:" <> line <>
                    "//" <> indent("Mockito.verify(context).emit(event)") <> semi
                case _ => emptyDoc
              })
            }
          },
          line <> line
        )
      }
    )
  }

  private[codegen] def mainSource(
      mainClassPackageName: String,
      mainClassName: String,
      services: Iterable[ModelBuilder.Service]
  ): Document = {
    assert(services.nonEmpty) // Pointless to generate a main if empty, so don't try

    val serviceClasses = services.map { case ModelBuilder.Service(fqn, _, _) =>
      (
        Option(fqn.parent.javaPackage).filterNot(_ == mainClassPackageName),
        s"${fqn.name}Impl",
        fqn.name,
        fqn.parent.javaOuterClassnameOption
      )
    }

    val imports = List(
      "import" <+> "com.akkaserverless.javasdk.AkkaServerless" <> semi
    ) ++
      serviceClasses.toSeq.collect {
        case (Some(packageName), implClassName, _, javaOuterClassName) =>
          javaOuterClassName.fold(emptyDoc)(ocn =>
            "import" <+> packageName <> dot <> ocn <> semi <> line
          ) <>
            "import" <+> packageName <> dot <> implClassName <> semi
      }

    pretty(
      "package" <+> mainClassPackageName <> semi <> line <>
      line <>
      ssep(
        imports,
        line
      ) <> line <>
      line <>
      `class`("public" <+> "final", mainClassName) {
        line <>
        method(
          "public" <+> "static",
          "void",
          "main",
          List("String[]" <+> "args"),
          "throws" <+> "Exception" <> space
        ) {
          "new" <+> "AkkaServerless()" <> line <>
          indent(
            ssep(
              serviceClasses.map {
                case (_, implClassName, entityName, Some(javaOuterClassName)) =>
                  ".registerEventSourcedEntity" <> parens(
                    nest(
                      line <>
                      implClassName <> ".class" <> comma <> line <>
                      javaOuterClassName <> ".getDescriptor().findServiceByName" <> parens(
                        dquotes(entityName)
                      ) <> comma <> line <>
                      javaOuterClassName <> ".getDescriptor()"
                    ) <> line
                  )
                case (_, _, entityName, None) =>
                  "// FIXME: No Java outer class name specified - cannot register" <+> entityName <+> "- ensure you are generating protobuf for Java"
              }.toSeq,
              line
            ) <> line <>
            ".start().toCompletableFuture().get()" <> semi
          )
        } <> line

      }
    )
  }

  private def dissassembleClassName(fullClassName: String): (String, String) = {
    val className   = fullClassName.reverse.takeWhile(_ != '.').reverse
    val packageName = fullClassName.dropRight(className.length + 1)
    packageName -> className
  }

  private def `class`(modifier: Doc, name: String)(body: Doc): Doc =
    modifier <+> "class" <+> name <+>
    braces(nest(line <> body) <> line)

  private def constructor(
      modifier: Doc,
      name: String,
      parameters: Seq[Doc]
  )(body: Doc): Doc =
    modifier <+> name <> parens(ssep(parameters, comma <> space)) <+>
    braces(nest(line <> body) <> line)

  private def method(
      modifier: Doc,
      returnType: String,
      name: String,
      parameters: Seq[Doc],
      postModifier: Doc
  )(body: Doc): Doc =
    modifier <+> returnType <+> name <> parens(ssep(parameters, comma <> space)) <+> postModifier <>
    braces(nest(line <> body) <> line)

  private def abstractMethod(
      modifier: Doc,
      returnType: String,
      name: String,
      parameters: Seq[Doc]
  ): Doc =
    modifier <+> "abstract" <+> returnType <+> name <> parens(
      ssep(parameters, comma <> space)
    ) <> semi

  private def qualifiedType(fullyQualifiedName: FullyQualifiedName): String =
    if (fullyQualifiedName.parent.javaMultipleFiles) fullyQualifiedName.name
    else s"${fullyQualifiedName.parent.javaOuterClassname}.${fullyQualifiedName.name}"

  private def typeImport(fullyQualifiedName: FullyQualifiedName): String = {
    val name =
      if (fullyQualifiedName.parent.javaMultipleFiles) fullyQualifiedName.name
      else fullyQualifiedName.parent.javaOuterClassname
    s"${fullyQualifiedName.parent.javaPackage}.${name}"
  }

  private def lowerFirst(text: String): String =
    text.headOption match {
      case Some(c) => c.toLower.toString + text.drop(1)
      case None    => ""
    }

}
